plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'esa.mydemo'
    compileSdk 33

    defaultConfig {
        applicationId "esa.mydemo"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        双向绑定
        dataBinding {
            enabled true
        }

        viewBinding {
            enabled true
        }

        //dex分包
        multiDexEnabled = true

    }

//    dexOptions {
//        preDexLibraries = false
//        javaMaxHeapSize "4g"     //增加java堆内存大小
//        additionalParameters = [//dex参数详见 dx --help
//                                '--multi-dex',//多分包
//                                '--set-max-idx-number=60000',//每个包内方法数上限
//                                '--main-dex-list='+projectDir+'/maindexlist.txt',//打包进主classes.dex的文件列表
//                                '--minimal-main-dex'//使上一句生效
//        ]
//    }


    //设置签名
    signingConfigs {
        releaseConfig {
            keyAlias 'tvrddmss'
            keyPassword '111111'
            storeFile file('K:\\android\\tvrddmss.jks')//签名文件路径
            storePassword '111111'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
//        双向绑定
    buildFeatures {
        viewBinding true
    }


//    def listSubFile = {
//        def resFolder = 'src/main/res/layout'
//        def files = file(resFolder).listFiles()
//        def folders = []
//        files.each { item -> folders.add(item.absolutePath)
//        }
//        folders.add(file(resFolder).parentFile.absolutePath)
//        return folders
//    }

    sourceSets {
        main {
            res.srcDirs 'src/main/res/layout/fab'
        }
    }
}

dependencies {

    implementation project(path: ':mylibrary')
    implementation project(path: ':myupdate')
    implementation project(path: ':myweather')

    implementation 'androidx.appcompat:appcompat:1.4.1'
//    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.preference:preference:1.1.+'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.annotation:annotation:1.3.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    //kotlin核心模块
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    def activity_version = "1.6.1"
    // ViewModel
    implementation("androidx.activity:activity:$activity_version")
    // Kotlin
    implementation("androidx.activity:activity-ktx:$activity_version")

    //可让您使用扁平视图层次结构（无嵌套视图组）创建复杂的大型布局。它与 RelativeLayout 相似，其中所有的视图均根据同级视图与父布局之间的关系进行布局，但其灵活性要高于 RelativeLayout，并且更易于与 Android Studio 的布局编辑器配合使用。
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    //协调布局--用于behavior,多个view联动
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'


    //用于material 组件
    //implementation 'com.google.android.material:material:1.8.0-alpha02'
    implementation 'com.google.android.material:material:1.9.0'

    //osm
    implementation 'org.osmdroid:osmdroid-android:6.1.0@aar'

    //自己开发的 下拉刷新，上拉加载更多
    implementation 'com.github.tvrddmss:MyImplementation:2.2'

    //流式布局
    //implementation 'com.google.android.flexbox:flexbox:3.0.0'

    //图片缓存及gif显示
    implementation 'com.github.bumptech.glide:glide:4.15.1'

    //引如Dagger2--以来注入的框架
    implementation('com.google.dagger:dagger:2.42')
    annotationProcessor('com.google.dagger:dagger-compiler:2.42')

    //chart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    //table 表格
    implementation 'com.github.huangyanbin:SmartTable:2.2.0'


    //视频播放控件
    var media3_version = "1.0.0-rc01"
    implementation("androidx.media3:media3-exoplayer:$media3_version")
    // For building media playback UIs
    implementation("androidx.media3:media3-ui:$media3_version")
    // For building media playback UIs for Android TV using the Jetpack Leanback library
    implementation("androidx.media3:media3-ui-leanback:$media3_version")
    // For loading data using librtmp
    implementation("androidx.media3:media3-datasource-rtmp:$media3_version")
    // For HLS playback support with ExoPlayer
    implementation("androidx.media3:media3-exoplayer-hls:$media3_version")


    //摄像头 拍照及录像
    // CameraX core library
    def camerax_version = '1.1.0-beta01'
    implementation "androidx.camera:camera-core:$camerax_version"
    // CameraX Camera2 extensions
    implementation "androidx.camera:camera-camera2:$camerax_version"
    // CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    // CameraX View class
    implementation "androidx.camera:camera-view:$camerax_version"
    implementation "androidx.camera:camera-video:$camerax_version"
    //implementation 'androidx.camera:camera-video:1.1.0-beta02'

//    implementation 'com.kongzue.dialog:dialog:2.4.8'

    //各种弹窗
    implementation 'com.github.li-xiaojun:XPopup:2.9.19'

    //retrofit
    implementation 'com.google.code.gson:gson:2.8.0'//(gson生成和解析库)
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'//(开源的网络请求库)
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'//(支持okhttp跟踪到一个网络请求的所有状态，包括请求头、请求体、响应行、 响应体,方便调试)
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'//(实现将HTTP请求转换为Java接口)
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'//(配合Rxjava 使用)
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'//(转换器，请求结果转换成Model)
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.2.1'//(一种帮助你做异步的框架. 类似于 AsyncTask. 但其灵活性和扩展性远远强于前者. 从能力上讲, 如果说 AsycnTask 是 DOS 操作系统, RxJava 是 Window 操作系统。)



    //app更新
    implementation 'com.github.ZuoHailong:AppUpdate:0.2.6'
//    implementation 'io.github.azhon:appupdate:4.2.9'
}


//自定义打包文件名称
android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "mydemo-${variant.versionName}.apk"
    }
}